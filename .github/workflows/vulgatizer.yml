name: vulgatizer

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  vulgatizer:
    if: "contains(github.event.head_commit.message, 'Create common spell')"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
        
    - name: Install dependencies
      run: |
        pip install -U pip
        pip install python-dateutil
        sudo apt-get update
        sudo apt-get install -y pandoc
        pip install git+https://github.com/OpenPecha/CommonSpell.git
    - name: Create vulgate text
      run: |
        import re
        from pathlib import Path
        from CommonSpell.encoder import Encoder
        from CommonSpell.bo.tokenizer_bo import TibetanTokenizer, TibetanNormalizer
        from CommonSpell.aligners.fdmp import FDMPaligner
        from CommonSpell.input_filters.pattern_filter import PatternInputFilter
        from CommonSpell.weighers.matrix_weigher import TokenMatrixWeigher
        from CommonSpell.weighers.token_weigher_count import TokenCountWeigher
        from CommonSpell.serializers.docx import DocxSerializer
        from CommonSpell.serializers.csv import CSVSerializer
        from CommonSpell.serializers.plain_text import PlainTextSerializer
        from CommonSpell.commonspeller import CommonSpeller
      

        def run_common_speller(version_dir):
            try:
                version_paths = list(version_dir.iterdir())
            except:
                print("witness directory doesn't exist")
                return None
            version_paths.sort()
            filter_patterns = [
                (re.compile('༌'), '་'),
                (re.compile('།། །།'), '༎ ༎ '),
                (re.compile('ག། །'), 'ག། '),
                (re.compile('། །'), '༎ '),
                (re.compile('ང།'), 'ང་།'),
                (re.compile('༎༎'), '༎ ༎ '),
                (re.compile('་ +'), '་'),
                (re.compile('་+'), '་'),
                (re.compile('\n'), ''), 
                ]
            common_speller = CommonSpeller(FDMPaligner(), filter_patterns, TibetanTokenizer(Encoder(), TibetanNormalizer(keep_eol=False)), version_paths=[])
            
            for version_path in version_paths:
                if version_path.suffix == '.txt':
                    common_speller.add_versions(version_path)
            token_matrix = common_speller.get_common_spell_matrix()
            tokenMatrixWeigher = TokenMatrixWeigher()
            weighers = [TokenCountWeigher()]
            common_spell_dir = Path('./common_spell')
            common_spell_dir.mkdir(exist_ok=True)

            for weigher in weighers:
                tokenMatrixWeigher.add_weigher(weigher, weigher_weight=1)
            weighted_matrix = tokenMatrixWeigher.get_weight_matrix(token_matrix)
  
            serializer_classes = [CSVSerializer, DocxSerializer, PlainTextSerializer]
            for serializer_class in serializer_classes:
                if serializer_class == DocxSerializer:
                    serializer = serializer_class(
                        weighted_matrix, 
                        output_dir=common_spell_dir, 
                        version_paths=version_paths, 
                        verions_to_serialize={})
                else:
                    serializer = serializer_class(weighted_matrix, output_dir=common_spell_dir)
                common_spell_text = serializer.serialize_matrix()
                serializer.save_serialized_matrix(common_spell_text)

        version_dir = Path('./versions/')
        common_spell_text = run_common_speller(version_dir)

      shell: python

    - name: Git Auto Commit
      uses: stefanzweifel/git-auto-commit-action@v4.16.0
      with:
        commit_message: Added or updated review dir
